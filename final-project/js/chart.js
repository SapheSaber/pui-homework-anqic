// The code of for populateYearFilter function is implemented with the help from ChatGPT
// Function to populate the year filter dropdown
function populateYearFilter(records) {
    const years = new Set(); // Use a Set to store unique years

    for (const date in records) {
        const recordDate = new Date(date);
        if (!isNaN(recordDate)) { // Check if the date is valid
            const recordYear = recordDate.getFullYear();
            years.add(recordYear); // Add the year to the Set
        } else {
            console.warn(`Invalid date format in records: ${date}`);
        }
    }

    const yearFilter = document.getElementById('year-filter');
    yearFilter.innerHTML = ''; // Clear existing options

    // Populate the year filter dropdown with unique years
    years.forEach(year => {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        yearFilter.appendChild(option);
    });

    if (years.size === 0) {
        console.warn("No valid years found in records.");
    }
}

// This code chunk (line 52 - 139) is refined/generated by ChatGPT
document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById('spendingChart').getContext('2d');
    const yearFilter = document.getElementById('year-filter');
    const totalSpendingElement = document.getElementById('total-spending');
    const categoryList = document.getElementById('category-list');

    let spendingChart;

    // Function to initialize the chart
    function initializeChart(data, labels, colors) {
        if (spendingChart) {
            spendingChart.destroy(); // Destroy the old chart before creating a new one
        }

        spendingChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }

    // Function to aggregate spending by category for the selected year
    function aggregateSpendingByCategory(records, year) {
        const categories = {
            "Food": 0,
            "Clothing": 0,
            "Housing": 0,
            "Education": 0,
            "Other": 0
        };
        let totalSpending = 0;

        for (const date in records) {
            const recordDate = new Date(date);
            const recordYear = recordDate.getFullYear();
            const { spending, spendingType } = records[date];

            if (recordYear === year && spending > 0 && categories.hasOwnProperty(spendingType)) {
                categories[spendingType] += spending;
                totalSpending += spending;
            }
        }

        return { categories, totalSpending };
    }

    // Function to update the chart and total spending display
    function updateChart(year) {
        const records = JSON.parse(localStorage.getItem('financeRecords')) || {};
        const { categories, totalSpending } = aggregateSpendingByCategory(records, year);

        const labels = Object.keys(categories);
        const data = Object.values(categories);
        const colors = ['#4A3AFF', '#70A8FD', '#AF64FB', '#0ED2B8', '#FF60A0']; 

        totalSpendingElement.textContent = totalSpending.toFixed(2);

        // Populate category list with each category's spending percentage
        categoryList.innerHTML = '';
        labels.forEach((label, index) => {
            const amount = data[index];
            const percentage = totalSpending > 0 ? ((amount / totalSpending) * 100).toFixed(1) : 0;
            const listItem = document.createElement('li');
            listItem.innerHTML = `<span style="color: ${colors[index]}">‚óè</span> ${label}: ${percentage}% ($${amount.toFixed(2)})`;
            categoryList.appendChild(listItem);
        });

        initializeChart(data, labels, colors);
    }

    yearFilter.addEventListener('change', function() {
        const selectedYear = parseInt(yearFilter.value);
        updateChart(selectedYear);
    });

    const records = JSON.parse(localStorage.getItem('financeRecords')) || {};
    populateYearFilter(records);

    const currentYear = new Date().getFullYear();
    yearFilter.value = currentYear;
    updateChart(currentYear);
});


// Create Donut Chart
document.addEventListener("DOMContentLoaded", function () {
    const ctx = document.getElementById('savingsProgressChart').getContext('2d');
    let savingsGoal = parseInt(localStorage.getItem('savingsGoal')) || 0; 

    function calculateTotalSaved() {
        const records = JSON.parse(localStorage.getItem('financeRecords')) || {};
        let totalSaved = 0;

        for (const date in records) {
            if (records[date].saving) {
                totalSaved += records[date].saving;
            }
        }
        return totalSaved;
    }

    function updateChart() {
        const totalSaved = calculateTotalSaved();
        const savingsPercentage = Math.min((totalSaved / savingsGoal) * 100, 100);
        const remaining = savingsGoal - totalSaved;

        savingsChart.data.datasets[0].data = [savingsPercentage, 100 - savingsPercentage];
        savingsChart.update();

        // Update the display
        document.querySelector('.savings-percentage h2').textContent = `${savingsPercentage.toFixed(0)}%`;
        document.querySelector('.savings-percentage p').textContent = `Total Saved: $${totalSaved.toLocaleString()}`;
        document.getElementById('savingsGoalDisplay').textContent = `$${savingsGoal.toLocaleString()}`;
        document.getElementById('remainingAmount').textContent = `$${remaining > 0 ? remaining.toLocaleString() : 0}`;
    }

    // The code below is based on the Charts.js document and refined by ChatGPT
    const savingsChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [0, 100], 
                backgroundColor: ['#4B4BFF', '#e0e0e0'], 
                borderWidth: 0
            }]
        },
        options: {
            rotation: -90, 
            circumference: 180, 
            cutout: '70%', 
            responsive: true,
            plugins: {
                legend: {
                    display: false 
                },
                tooltip: {
                    enabled: false 
                }
            }
        }
    });

    // Edit goal functionality
    window.editGoal = function () {
        const savingsGoalDisplay = document.getElementById('savingsGoalDisplay');
        const savingsGoalInput = document.getElementById('savingsGoalInput');

        savingsGoalDisplay.style.display = 'none';
        savingsGoalInput.style.display = 'inline-block';
        savingsGoalInput.value = savingsGoal;
        savingsGoalInput.focus();

        function saveGoal() {
            const newGoal = parseInt(savingsGoalInput.value);
            if (!isNaN(newGoal) && newGoal > 0) {
                savingsGoal = newGoal;
                localStorage.setItem('savingsGoal', savingsGoal);
                updateChart(); // Update the chart and display
            }
            savingsGoalDisplay.style.display = 'inline-block';
            savingsGoalInput.style.display = 'none';
            savingsGoalInput.removeEventListener('blur', saveGoal);
            savingsGoalInput.removeEventListener('keypress', onEnterSave);
        }

        function onEnterSave(e) {
            if (e.key === 'Enter') saveGoal();
        }

        savingsGoalInput.addEventListener('blur', saveGoal);
        savingsGoalInput.addEventListener('keypress', onEnterSave);
    };

    updateChart();
});


document.addEventListener("DOMContentLoaded", function () {
    const ctx = document.getElementById('savingChart').getContext('2d');
    const totalSavingElement = document.getElementById('total-saving');

    // Fetch and process savings data from localStorage
    function getSavingsData() {
        const records = JSON.parse(localStorage.getItem('financeRecords')) || {};
        const data = [];
        let totalSavings = 0;

        for (const date in records) {
            const record = records[date];
            if (record.saving) {
                totalSavings += record.saving;
                data.push({
                    date: new Date(date),
                    amount: record.saving,
                });
            }
        }

        // Sort data by date
        data.sort((a, b) => a.date - b.date);
        return { data, totalSavings };
    }

    const { data, totalSavings } = getSavingsData();
    totalSavingElement.textContent = totalSavings.toLocaleString();

    // Format data for Chart.js
    const labels = data.map(entry => entry.date.toLocaleDateString("en-US", { day: "numeric", month: "short" }));
    const amounts = data.map(entry => entry.amount);

    // Initialize the chart
    const savingChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Savings',
                data: amounts,
                borderColor: '#328A35',
                backgroundColor: 'rgba(50, 138, 53, 0.1)',
                borderWidth: 2,
                pointRadius: 5,
                pointBackgroundColor: '#328A35',
                pointBorderColor: '#ffffff',
                pointBorderWidth: 2,
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    display: true,
                    title: {
                        display: true,
                        text: 'Date'
                    }
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Amount ($)'
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            return `$${tooltipItem.raw.toLocaleString()}`;
                        }
                    }
                }
            }
        }
    });

    // Update chart for different time frames (Day, Week, Month, Year)
    function updateChart(timeframe) {
        const now = new Date();
        let filteredData;
        
        switch (timeframe) {
            case 'Day':
                filteredData = data.slice(-1); // Only today‚Äôs data
                break;
            case 'Week':
                filteredData = data.filter(entry => (now - entry.date) / (1000 * 60 * 60 * 24) <= 7);
                break;
            case 'Month':
                filteredData = data.filter(entry => (now - entry.date) / (1000 * 60 * 60 * 24) <= 30);
                break;
            case 'Year':
                filteredData = data.filter(entry => (now - entry.date) / (1000 * 60 * 60 * 24) <= 365);
                break;
            default:
                filteredData = data;
        }

        // Update chart data
        savingChart.data.labels = filteredData.map(entry => entry.date.toLocaleDateString("en-US", { day: "numeric", month: "short" }));
        savingChart.data.datasets[0].data = filteredData.map(entry => entry.amount);
        savingChart.update();
    }

    // Event listeners for timeframe buttons
    document.getElementById('day-btn').addEventListener('click', () => updateChart('Day'));
    document.getElementById('week-btn').addEventListener('click', () => updateChart('Week'));
    document.getElementById('month-btn').addEventListener('click', () => updateChart('Month'));
    document.getElementById('year-btn').addEventListener('click', () => updateChart('Year'));
});


